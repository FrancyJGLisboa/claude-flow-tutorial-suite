# Base ConfigMaps for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: production
  labels:
    app: integration-system
    component: config
data:
  # Application Configuration
  app.yml: |
    server:
      port: 3000
      host: "0.0.0.0"
      timeout: 30000
      keepAlive: true
    
    database:
      pool:
        min: 2
        max: 20
        idle: 10000
        acquire: 60000
        evict: 1000
      options:
        logging: false
        dialectOptions:
          ssl:
            require: false
    
    redis:
      retryDelayOnFailover: 100
      enableOfflineQueue: false
      maxRetriesPerRequest: 3
      retryDelayOnClusterDown: 300
      retryDelayOnTimeout: 100
    
    auth:
      jwt:
        expiry: "15m"
        refresh_expiry: "7d"
        issuer: "integration-system"
        audience: "integration-users"
      session:
        max_sessions: 5
        cleanup_interval: "1h"
    
    rate_limiting:
      window_ms: 900000
      max_requests: 100
      message: "Too many requests, please try again later"
    
    cors:
      origin: true
      credentials: true
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
      allowedHeaders: ["Content-Type", "Authorization"]
    
    logging:
      level: "info"
      format: "json"
      colorize: false
      timestamp: true
    
    monitoring:
      metrics:
        enabled: true
        path: "/metrics"
      health:
        enabled: true
        path: "/api/v1/health"
      tracing:
        enabled: true
        sample_rate: 0.1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: production
  labels:
    app: integration-system
    component: nginx
data:
  nginx.conf: |
    upstream api_gateway {
        least_conn;
        server api-gateway-service:80 max_fails=3 fail_timeout=30s;
    }
    
    upstream auth_service {
        least_conn;
        server auth-service:80 max_fails=3 fail_timeout=30s;
    }
    
    upstream user_service {
        least_conn;
        server user-service:80 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;
        
        # API Gateway
        location /api/v1/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://api_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_timeout 60s;
        }
        
        # Auth Service
        location /api/v1/auth/ {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # User Service
        location /api/v1/users/ {
            limit_req zone=api burst=30 nodelay;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health checks
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-init
  namespace: production
  labels:
    app: integration-system
    component: database
data:
  init.sql: |
    -- Database initialization script
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "citext";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- Create database roles
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'app_reader') THEN
            CREATE ROLE app_reader;
        END IF;
        
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'app_writer') THEN
            CREATE ROLE app_writer;
        END IF;
    END
    $$;
    
    -- Grant permissions
    GRANT CONNECT ON DATABASE appdb TO app_reader;
    GRANT CONNECT ON DATABASE appdb TO app_writer;
    GRANT USAGE ON SCHEMA public TO app_reader, app_writer;
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO app_reader;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_writer;
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO app_writer;
    
    -- Set default privileges
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO app_reader;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_writer;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO app_writer;