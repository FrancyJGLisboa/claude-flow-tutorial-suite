# Production Secrets Template
# This file serves as a template for creating Kubernetes secrets in production
# DO NOT commit actual secret values to version control

# =============================================================================
# Database Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: production
  labels:
    app: integration-system
    component: database
  annotations:
    kubernetes.io/description: "PostgreSQL database connection secrets"
type: Opaque
stringData:
  # Replace with actual base64 encoded values in production
  url: "postgresql://USER:PASSWORD@HOST:PORT/DATABASE?sslmode=require"
  host: "HOST"
  port: "5432"
  database: "DATABASE_NAME"
  username: "USERNAME"
  password: "PASSWORD"
  ssl_mode: "require"
  pool_min: "5"
  pool_max: "20"
  connection_timeout: "30000"
  idle_timeout: "30000"

---
# =============================================================================
# Redis Cache Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: production
  labels:
    app: integration-system
    component: cache
  annotations:
    kubernetes.io/description: "Redis cache connection secrets"
type: Opaque
stringData:
  url: "redis://PASSWORD@HOST:PORT/0"
  host: "HOST"
  port: "6379"
  password: "PASSWORD"
  database: "0"
  max_retries: "3"
  retry_delay: "1000"
  connection_timeout: "5000"
  command_timeout: "5000"

---
# =============================================================================
# Elasticsearch Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secret
  namespace: production
  labels:
    app: integration-system
    component: search
  annotations:
    kubernetes.io/description: "Elasticsearch connection secrets"
type: Opaque
stringData:
  url: "https://USERNAME:PASSWORD@HOST:PORT"
  host: "HOST"
  port: "9200"
  username: "USERNAME"
  password: "PASSWORD"
  ssl_enabled: "true"
  verify_certs: "true"
  index_prefix: "integration_system"
  max_retries: "3"
  request_timeout: "30000"

---
# =============================================================================
# JWT Authentication Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: production
  labels:
    app: integration-system
    component: auth
  annotations:
    kubernetes.io/description: "JWT signing and verification secrets"
type: Opaque
stringData:
  secret: "YOUR_JWT_SECRET_KEY_MINIMUM_256_BITS"
  refresh_secret: "YOUR_JWT_REFRESH_SECRET_KEY_MINIMUM_256_BITS"
  issuer: "integration-system"
  audience: "integration-users"
  access_token_expiry: "15m"
  refresh_token_expiry: "7d"
  algorithm: "HS256"
  clock_tolerance: "30"

---
# =============================================================================
# API Keys and External Service Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: api-keys-secret
  namespace: production
  labels:
    app: integration-system
    component: external
  annotations:
    kubernetes.io/description: "External API keys and service secrets"
type: Opaque
stringData:
  secret: "API_KEY_SIGNING_SECRET"
  external_service_key: "EXTERNAL_SERVICE_API_KEY"
  webhook_secret: "WEBHOOK_VERIFICATION_SECRET"
  encryption_key: "DATA_ENCRYPTION_KEY_32_CHARS_LONG"
  session_secret: "SESSION_ENCRYPTION_SECRET"

---
# =============================================================================
# AWS S3 Storage Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: s3-secret
  namespace: production
  labels:
    app: integration-system
    component: storage
  annotations:
    kubernetes.io/description: "AWS S3 storage access credentials"
type: Opaque
stringData:
  access_key: "AWS_ACCESS_KEY_ID"
  secret_key: "AWS_SECRET_ACCESS_KEY"
  bucket: "S3_BUCKET_NAME"
  region: "us-west-2"
  endpoint: "https://s3.us-west-2.amazonaws.com"
  force_path_style: "false"
  ssl_enabled: "true"
  signature_version: "v4"

---
# =============================================================================
# SMTP Email Service Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: smtp-secret
  namespace: production
  labels:
    app: integration-system
    component: email
  annotations:
    kubernetes.io/description: "SMTP email service configuration"
type: Opaque
stringData:
  host: "SMTP_HOST"
  port: "587"
  username: "SMTP_USERNAME"
  password: "SMTP_PASSWORD"
  from_email: "noreply@example.com"
  from_name: "Integration System"
  secure: "false"
  start_tls: "true"
  connection_timeout: "10000"
  socket_timeout: "10000"

---
# =============================================================================
# Monitoring and Observability Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secret
  namespace: production
  labels:
    app: integration-system
    component: monitoring
  annotations:
    kubernetes.io/description: "Monitoring service credentials"
type: Opaque
stringData:
  prometheus_remote_write_url: "PROMETHEUS_REMOTE_WRITE_URL"
  prometheus_remote_write_username: "USERNAME"
  prometheus_remote_write_password: "PASSWORD"
  jaeger_endpoint: "JAEGER_COLLECTOR_ENDPOINT"
  jaeger_username: "JAEGER_USERNAME"
  jaeger_password: "JAEGER_PASSWORD"
  grafana_admin_password: "GRAFANA_ADMIN_PASSWORD"
  slack_webhook_url: "SLACK_WEBHOOK_URL"
  pagerduty_service_key: "PAGERDUTY_INTEGRATION_KEY"

---
# =============================================================================
# TLS/SSL Certificates
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: production
  labels:
    app: integration-system
    component: ingress
  annotations:
    kubernetes.io/description: "TLS certificates for HTTPS termination"
    cert-manager.io/issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
# =============================================================================
# Registry Pull Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: production
  labels:
    app: integration-system
    component: registry
  annotations:
    kubernetes.io/description: "Container registry pull credentials"
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: |
    {
      "auths": {
        "ghcr.io": {
          "auth": "BASE64_ENCODED_USERNAME_PASSWORD"
        }
      }
    }

---
# =============================================================================
# Backup and Recovery Secrets
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: backup-secret
  namespace: production
  labels:
    app: integration-system
    component: backup
  annotations:
    kubernetes.io/description: "Backup service credentials"
type: Opaque
stringData:
  s3_backup_bucket: "BACKUP_S3_BUCKET"
  s3_backup_access_key: "BACKUP_ACCESS_KEY"
  s3_backup_secret_key: "BACKUP_SECRET_KEY"
  s3_backup_region: "us-west-2"
  encryption_key: "BACKUP_ENCRYPTION_KEY"
  retention_days: "30"
  backup_schedule: "0 2 * * *"

---
# =============================================================================
# Feature Flags and Configuration
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: feature-flags-secret
  namespace: production
  labels:
    app: integration-system
    component: config
  annotations:
    kubernetes.io/description: "Feature flags and runtime configuration"
type: Opaque
stringData:
  feature_service_url: "FEATURE_FLAG_SERVICE_URL"
  feature_service_key: "FEATURE_FLAG_API_KEY"
  environment_key: "production"
  polling_interval: "60000"
  cache_ttl: "300000"
  fallback_config: |
    {
      "features": {
        "user_registration": true,
        "social_login": true,
        "advanced_search": true,
        "file_upload": true,
        "real_time_notifications": true,
        "analytics": true,
        "rate_limiting": true,
        "maintenance_mode": false
      }
    }